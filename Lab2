library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

--
-- 7-segment display driver. It displays a 4-bit number on 7-segments 
-- This is created as an entity so that it can be reused many times easily
--

entity SevenSegment is port (
   
   dataIn      :  in  std_logic_vector(3 downto 0);   -- The 4 bit data to be displayed
   blanking    :  in  std_logic;                      -- This bit turns off all segments
   
   segmentsOut :  out std_logic_vector(6 downto 0)    -- 7-bit outputs to a 7-segment
); 

end SevenSegment;

architecture Behavioral of SevenSegment is

-- 
-- The following statements convert a 4-bit input, called dataIn to a pattern of 7 bits
-- The segment turns on when it is '0' otherwise '1'
-- The blanking input is added to turns off the all segments
--

begin

   with blanking & dataIn select --  gfedcba        b3210      -- D7S
      segmentsOut(6 downto 0) <=    "1000000" when "00000",    -- [0]
                                    "1111001" when "00001",    -- [1]
                                    "0100100" when "00010",    -- [2]      +---- a ----+
                                    "0110000" when "00011",    -- [3]      |           |
                                    "0011001" when "00100",    -- [4]      |           |
                                    "0010010" when "00101",    -- [5]      f           b
                                    "0000010" when "00110",    -- [6]      |           |
                                    "1111000" when "00111",    -- [7]      |           |
                                    "0000000" when "01000",    -- [8]      +---- g ----+
                                    "0010000" when "01001",    -- [9]      |           |
                                    "0001000" when "01010",    -- [A]      |           |
                                    "0000011" when "01011",    -- [b]      e           c
                                    "0100111" when "01100",    -- [c]      |           |
                                    "0100001" when "01101",    -- [d]      |           |
                                    "0000110" when "01110",    -- [E]      +---- d ----+
                                    "0001110" when "01111",    -- [F]
                                    "1111111" when others;     -- [ ]

end Behavioral;

--------------------------------------------------------------------------------
-- Main entity
--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Lab2 is port (
     
      sw               :   in  std_logic_vector(17 downto 0); -- 18 dip switches

      ledr             :   out std_logic_vector(17 downto 0); -- 18 red LEDs
      hex0, hex1, hex2, hex4, hex5, hex6, hex7:   out std_logic_vector( 6 downto 0)  -- 7-segment desplays
);
end Lab2;

architecture SimpleCircuit of Lab2 is

--
-- In order to use the "SevenSegment" entity, we should declare it with first
-- 

   component SevenSegment port (
      dataIn      :  in    std_logic_vector(3 downto 0);
      blanking    :  in    std_logic;
      segmentsOut :  out   std_logic_vector(6 downto 0)
   );
   end component;

-- Create any signals, or temporary variables to be used
--
--  Note that there are two basic types and mixing them is difficult
--  unsigned is a signal which can be used to perform math operations such as +, -, *
--  std_logic_vector is a signal which can be used for logic operations such as OR, AND, NOT, XOR
--
   signal OperandOne: std_logic_vector(7 downto 0); -- OperandOne will be controlled by switches 0 to 7
   signal OperandTwo: std_logic_vector(15 downto 8); -- OperandTwo will be controlled by switches 8 to 15
   signal Result: std_logic_vector(8 downto 0); --Assigned a result variable that will be used for logic operations 
   signal Operator: std_logic_vector(1 downto 0); --The logic operation will depend on two switches
   signal blanking: std_logic;
   
-- Here the circuit begins

begin

-- intermediate signal assignments

   OperandOne <= sw(7 downto 0);  -- connect the lowest 8 switches to A
   OperandTwo <= sw(15 downto 8);  -- connect the higher 8 switches to B
   
-- 2x1 multiplexer
-- when switch 17 down to 16 
   with sw(17 downto 16) select      
        Result <= "0"&OperandOne AND "0"&OperandTwo when "00",   --AND operation will occur when both switches 17 and 16 are off
        	  "0"&OperandOne OR "0"&OperandTwo when "01",    --OR operation will occur when switch 16 is turned on
                  "0"&OperandOne XOR "0"&OperandTwo when "10",   --XOR operation will occur when switch 17 is turned on
                  std_logic_vector(unsigned("0"&OperandOne)+unsigned("0"&OperandTwo)) when others; -- Add the operations
				   
   with Result(8) select --if switch 8 is up, blanking will be enabled
   blanking <= '0' when '1', --when switch is up, then blanking will show zero
   '1' when others; 
           
-- signal is assigned to LED

   ledr(7 downto 0) <= OperandOne; 
   ledr(15 downto  8) <= OperandTwo;
   ledr(17 downto 16) <= Operator;
	
-- signal is sidplayed on seven-segment. '0' is concatenated with signal to make a 4-bit input
-- written in order of the SevenSegment part, which is defined at the beginning of the code

   D7SH0: SevenSegment port map(Result(3 downto 0), '0', hex0);  -- Value is displayed on Hex0, blanking is disabled
   D7SH1: SevenSegment port map(Result(7 downto 4), '0', hex1); --Value is displayed on Hex1, blanking is disabled
   D7SH2: SevenSegment port map("000"&Result(8), blanking, hex2); -- Value is displayed on Hex2,blanking is enabled
   D7SH4: SevenSegment port map(OperandOne(3 downto 0), '0', hex4 ); -- Value is displayed on Hex4, blanking is disabled
   D7SH5: SevenSegment port map(OperandOne(7 downto 4), '0', hex5 ); Value is displayed on Hex5, blanking is disabled
   
   D7SH6: SevenSegment port map(OperandTwo(11 downto 8), '0', hex6 );  Value is displayed on Hex6, blanking is disabled
   D7SH7: SevenSegment port map(OperandTwo(15 downto 12), '0', hex7 ); Value is displayed on Hex7, blanking is disabled

end SimpleCircuit;
